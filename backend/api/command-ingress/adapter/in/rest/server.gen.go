// Package restadapter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package restadapter

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Content defines model for Content.
type Content struct {
	// Id The unique identifier of the content
	Id openapi_types.UUID `json:"id"`

	// Name The name of the content
	Name string `json:"name"`

	// ParentID The parent directory of the content
	ParentID openapi_types.UUID `json:"parentID"`

	// Type The type of the content
	Type string `json:"type"`
}

// CreateContentJSONBody defines parameters for CreateContent.
type CreateContentJSONBody struct {
	// Name The name of the new content
	Name string `json:"name"`

	// ParentID The parent directory of the new content
	ParentID *openapi_types.UUID `json:"parentID,omitempty"`

	// Type The type of the new content
	Type *string `json:"type,omitempty"`
}

// CreateContentJSONRequestBody defines body for CreateContent for application/json ContentType.
type CreateContentJSONRequestBody CreateContentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the content by ID
	// (GET /content/{id})
	GetContentByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get the contents of a directory
	// (GET /contents)
	GetHomeDirectory(w http.ResponseWriter, r *http.Request)
	// Create a new directory
	// (POST /contents)
	CreateContent(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get the content by ID
// (GET /content/{id})
func (_ Unimplemented) GetContentByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the contents of a directory
// (GET /contents)
func (_ Unimplemented) GetHomeDirectory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new directory
// (POST /contents)
func (_ Unimplemented) CreateContent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetContentByID operation middleware
func (siw *ServerInterfaceWrapper) GetContentByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContentByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHomeDirectory operation middleware
func (siw *ServerInterfaceWrapper) GetHomeDirectory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHomeDirectory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateContent operation middleware
func (siw *ServerInterfaceWrapper) CreateContent(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateContent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/content/{id}", wrapper.GetContentByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/contents", wrapper.GetHomeDirectory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/contents", wrapper.CreateContent)
	})

	return r
}

type GetContentByIDRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetContentByIDResponseObject interface {
	VisitGetContentByIDResponse(w http.ResponseWriter) error
}

type GetContentByID200JSONResponse Content

func (response GetContentByID200JSONResponse) VisitGetContentByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHomeDirectoryRequestObject struct {
}

type GetHomeDirectoryResponseObject interface {
	VisitGetHomeDirectoryResponse(w http.ResponseWriter) error
}

type GetHomeDirectory200JSONResponse []Content

func (response GetHomeDirectory200JSONResponse) VisitGetHomeDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateContentRequestObject struct {
	Body *CreateContentJSONRequestBody
}

type CreateContentResponseObject interface {
	VisitCreateContentResponse(w http.ResponseWriter) error
}

type CreateContent200JSONResponse string

func (response CreateContent200JSONResponse) VisitCreateContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the content by ID
	// (GET /content/{id})
	GetContentByID(ctx context.Context, request GetContentByIDRequestObject) (GetContentByIDResponseObject, error)
	// Get the contents of a directory
	// (GET /contents)
	GetHomeDirectory(ctx context.Context, request GetHomeDirectoryRequestObject) (GetHomeDirectoryResponseObject, error)
	// Create a new directory
	// (POST /contents)
	CreateContent(ctx context.Context, request CreateContentRequestObject) (CreateContentResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetContentByID operation middleware
func (sh *strictHandler) GetContentByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetContentByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetContentByID(ctx, request.(GetContentByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContentByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetContentByIDResponseObject); ok {
		if err := validResponse.VisitGetContentByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHomeDirectory operation middleware
func (sh *strictHandler) GetHomeDirectory(w http.ResponseWriter, r *http.Request) {
	var request GetHomeDirectoryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHomeDirectory(ctx, request.(GetHomeDirectoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHomeDirectory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHomeDirectoryResponseObject); ok {
		if err := validResponse.VisitGetHomeDirectoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateContent operation middleware
func (sh *strictHandler) CreateContent(w http.ResponseWriter, r *http.Request) {
	var request CreateContentRequestObject

	var body CreateContentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateContent(ctx, request.(CreateContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateContent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateContentResponseObject); ok {
		if err := validResponse.VisitCreateContentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUzW7bPBB8FWK/72hYansJdHNipHWBAgEaoIfAB0ZaWwwkklmuEgiG3r1YSracWMhP",
	"k4sta83h7szs7CB3tXcWLQfIdhDyEmsdHy+cZbQsj56cR2KDsWAK+Sww5GQ8G2chg+sSVWPNfYPKFGjZ",
	"bAySchvFJap8QJrBxlGtGTJoGlPADLj1CBkEJmO30M3A6hqn0aVyCngC4DWh5dVyGqSvqsIQ5uyo/YcO",
	"+xdT4FJ5tcNuBoT3jSEsILuBeEcc+qj14dD6cNjd3mHO8XDAvCHD7W8RqtfjFjUhLRoux1+X+zF+/rmG",
	"WS+rIPXVsa2S2UMnwMZu3Olci6uV2jhStbZ6a+xWbUyFQc4brgTg0lSofkkVSS2uVjCDB6TQn07n6fyL",
	"kOY8Wu0NZPBtns7TOCyXsftkoCrZmaKTF1uMnhPHaeliVUAG35EHP563kSGvSdfISAGymyk1VstTLYwU",
	"5eY96VkvwKgIU4MDXVq6eMUO3VoOB+9s6LX4mqbylY+7o72vTB4nSe6CtLc7wv+fcAMZ/JeMa5gMO5js",
	"FzDKczpgfiiProhcHPvhZi0thqauNbU9j8ecqNtWrZYRYq9DeEmDH67G5X554IOzG8Y6vJmEA/eaSLdT",
	"pCxUZQKL6tGkStvisOkSXR8hKgisHoMjRo0LEyxdEGrGi4PnxFsY+NwV7bvYeZq5b8tFi4+fn41PQT8p",
	"H1/s9FlGxtknwrD/3wcM+PzayTWz+Fi1Ko+qFscGeI+belMoHec+xogg9LCPsYaqIZSzJKlcrqvSBc7O",
	"0rMUunX3NwAA//+1ntg8rgcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
