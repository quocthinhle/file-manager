// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package pgdbgenerated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNode = `-- name: CreateNode :one
INSERT INTO node (id, type, name, parent_id, owner_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, type, name, parent_id, owner_id
`

type CreateNodeParams struct {
	ID       pgtype.UUID
	Type     string
	Name     string
	ParentID pgtype.UUID
	OwnerID  pgtype.UUID
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, createNode,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.ParentID,
		arg.OwnerID,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.ParentID,
		&i.OwnerID,
	)
	return i, err
}

const getAllNodes = `-- name: GetAllNodes :many
SELECT id, type, name, parent_id, owner_id FROM node
`

func (q *Queries) GetAllNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.Query(ctx, getAllNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.ParentID,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParentNodes = `-- name: GetParentNodes :many
SELECT id, type, name, parent_id, owner_id FROM node WHERE parent_id IS NULL AND owner_id = $1
`

func (q *Queries) GetParentNodes(ctx context.Context, ownerID pgtype.UUID) ([]Node, error) {
	rows, err := q.db.Query(ctx, getParentNodes, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.ParentID,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
